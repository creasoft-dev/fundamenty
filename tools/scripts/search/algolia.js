/**
 * Script that helps manage Algolia index.
 *
 * Usage: node algolia-tool.js [action] [-v]
 * Where [action] can be clear or push
 *
 * `clear` action - clears all entries in the index.
 * `push` action -
 * Pushes the json files under ./_site/api.
 * It relies on json files generated by the template files
 * ./src/api/pages-json.njk, and
 * ./src/api/posts-json.njk
 *
 * Env variables:
 * ALGOLIA_APP_ID  - Algolia App ID
 * ALGOLIA_ADMIN_API_KEY - Algolia Admin API key
 * When adding to the pipeline, make sure to configure those envs.
 */
const utils = require('../../utils');
const algoliasearch = require('algoliasearch');

const META = {
    name: 'search/algolia',
    dir: __dirname,
    description: "Manage indexing for Algolia",
    command: {
        arguments: '<action>'
    }
};

const VALID_ACTIONS = ['clear', 'index']

const ALGOLIA_APP_ID = process.env.ALGOLIA_APP_ID;
const ALGOLIA_ADMIN_API_KEY = process.env.ALGOLIA_ADMIN_API_KEY;

const API_PATH = './_site/api';


/**
 * Clears Algolia index
 * @param {AlgoliaIndex} index
 */
async function clearIndex(index) {
    try {
        utils.logger.info(`Clearing entries from index...`);
        const response = await index.clearObjects();
        utils.logger.debug('clearObjects returned: %j', response);
    } catch (error) {
        utils.logger.error('Error while clearing index: ' + error);
    }
}

async function pushToIndex(index, ...dataFilePaths) {
    for (dataFilePath of dataFilePaths) {
        utils.logger.debug(`Reading objects from file: ${dataFilePath}`);
        const json = utils.readJson(dataFilePath);

        utils.logger.info(`Indexing ${json.length} objects from [${dataFilePath}]...`);
        try {
            const response = await index.saveObjects(json);
            utils.logger.debug('saveObjects returned: %j', response);
        } catch (error) {
            utils.logger.error('Error while pushing: ',  error);
        }
    }

    utils.logger.info("Indexing all objects completed.");
}


/**
 *
 * @param {*} config
 * @param {ScriptContext} context
 */
async function run(config, context) {

    const params = utils.parseArgs(META, context.args);

    utils.logger.info(`Executing ${META.name} (%j)`, params);

    const client = algoliasearch(ALGOLIA_APP_ID, ALGOLIA_ADMIN_API_KEY);
    const index = client.initIndex(process.env.ALGOLIA_INDEX_NAME);

    const inputPath = utils.getInputPath(config);

    if (params.action === 'clear') {
        await clearIndex(index);
    } else if (params.action === 'index') {
        await pushToIndex(index, `${API_PATH}/pages.json`, `${API_PATH}/posts.json`);
    }
}

module.exports = {
    META,
    run
};
