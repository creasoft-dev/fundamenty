/**
 * Too that helps manage ES index.
 *
 * Usage: node es-tool.js [action] [-v]
 * Where [action] can be clear or push
 *
 * `clear` action - clears all entries in the index.
 * `push` action -
 * Pushes the json files under ./_site/api.
 * It relies on json files generated by the template files
 * ./src/api/pages-json.njk, and
 * ./src/api/posts-json.njk
 *
 * Env variables:
 * ES_APP_ID  - ElasticSearch App ID
 * ES_ADMIN_ACCESS_KEY - ElasticSearch Admin API key
 * When adding to the pipeline, make sure to configure those envs.
 */
require("dotenv").config();
const fs = require("fs");

const { Client } = require("@elastic/elasticsearch");

const ES_URL = process.env.ES_URL;
const ES_ADMIN_ACCESS_KEY = process.env.ES_ADMIN_ACCESS_KEY;
const ES_ADMIN_ACCESS_SECRET = process.env.ES_ADMIN_ACCESS_SECRET;
const ES_INDEX_NAME = process.env.ES_INDEX_NAME;

console.log(`Initializing ElasticSearch client with ES_URL=${ES_URL}`);
const client = new Client({ node: `https://${ES_ADMIN_ACCESS_KEY}:${ES_ADMIN_ACCESS_SECRET}@${ES_URL}` });

const APP_VERSION = "0.1";
const API_PATH = "./_site/api";


// Skip first two as its node and script name
var args = process.argv.slice(2);

const doInit = args.some((el) => el == "init");
const doClear = args.some((el) => el == "clear");
const doPush = args.some((el) => el == "push");
const verbose = args.some((el) => el == "-v");

if (!(doClear || doPush)) {
  console.log("es-tool [action] [-v]");
  console.log("     Where [action] can be: init, clear, push");
}

function readJson(path) {
  let rawdata = fs.readFileSync(path);
  return JSON.parse(rawdata);
}

async function createIndex() {
  const index_config = require("./templates/elastic_index_config.json");

  try {
    verbose && console.log(`Creating index [${ES_INDEX_NAME}]...`);
    return await client.indices.create({
        index: ES_INDEX_NAME,
        body: index_config
    });
  } catch (error) {
    console.error("Error while creating index: " + error);
  }
}

async function clearIndex() {

  let matchIndex = null;
  try {
    matchIndex = await client.indices.get({
      index: ES_INDEX_NAME
    });
  } catch (error) {
    if (error.meta.statusCode == 404) {
      // If 404, it's ok
      console.log (`Index [${ES_INDEX_NAME}] not found`);
    } else {
      console.log ('Fetching error Error: %j', error);
    }
  }

  if (matchIndex) {
    // Successfully retrieved the index, we want to delete it and re-create it
    verbose && console.log(`Deleting existing index [${ES_INDEX_NAME}]...`);
    await client.indices.delete({
      index: ES_INDEX_NAME,
      ignore_unavailable: true
    });
    verbose && console.log(`Index [${ES_INDEX_NAME}] deleted.`);
  }
  
  await createIndex();
}

async function pushToIndex(...dataFilePaths) {
  for (dataFilePath of dataFilePaths) {
    verbose && console.log(`Reading objects from file: ${dataFilePath}`);
    const json = readJson(dataFilePath);

    verbose && console.log(`Pushing ${json.length} objects to [${ES_INDEX_NAME}] index...`);
    let ctr = 0;
    for (jsonObj of json) {
        try {
          objId = jsonObj.objectID.replace(new RegExp('/', 'g'), '');
          await client.index({
              index: ES_INDEX_NAME,
              id: objId, // jsonObj.objectID,
              // type: '_doc', // uncomment this line if you are using {es} â‰¤ 6
              body: jsonObj,
          });
        } catch (error) {
            console.error("Error while pushing: %j", error);
        }
    }
  }

  console.log("Pushing objects completed.");
}

(async () => {
  console.log("ElasticSearch-tool v.%s started with args %j", APP_VERSION, args);
  if (doInit) {
    await createIndex();
  }
  if (doClear) {
    await clearIndex();
  }
  if (doPush) {
    await pushToIndex(`${API_PATH}/pages.json`, `${API_PATH}/posts.json`, `${API_PATH}/radar.json`);
  }
})();
